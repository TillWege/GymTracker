generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Workout       Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id        String     @id @default(cuid())
  exercises Exercise[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  timestamp DateTime
}

model Exercise {
  id             String       @id @default(cuid())
  workout        Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId      String
  name           String
  sets           Int
  reps           Int
  weight         Int
  type           ExerciseType @relation(fields: [exerciseTypeId], references: [id])
  exerciseTypeId String
}

model ExerciseType {
  id       String     @id @default(cuid())
  name     String
  Exercise Exercise[]
}
