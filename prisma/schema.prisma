generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PG")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  gymDays       GymDay[]
  Exercise      Exercise[]
  Workout       Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ExerciseType {
  MACHINE
  FREE_WEIGHT
  CARDIO
}

enum MuscleCategory {
  CHEST
  BACK
  SHOULDERS
  ARMS
  LEGS
  ABS
}

enum MuscleGroup {
  CHEST_UPPER
  CHEST_LOWER
  BACK_UPPER
  BACK_LOWER
  SHOULDERS_FRONT
  SHOULDERS_BACK
  BICEPS
  TRICEPS
  QUADS
  HAMSTRINGS
  CALVES
  ABS_UPPER
  ABS_LOWER
}

model GymDay {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime
  workout Workout[]
}

model Exercise {
  id             String         @id @default(cuid())
  name           String
  muscleCategory MuscleCategory
  muscleGroup    MuscleGroup?
  exerciseType   ExerciseType
  workouts       Workout[]
  creator        User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId      String
  createdAt      DateTime       @default(now())
}

model Set {
  id        String  @id @default(cuid())
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId String
  reps      Int
  weight    Int
}

model Workout {
  id         String       @id @default(cuid())
  day        GymDay       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId      String
  exercise   Exercise     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  sets       Set[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  cardioData CardioData[]
}

model CardioData {
  id        String  @id @default(cuid())
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId String
  time      Int
  intensity Int
  distance  Int
}
